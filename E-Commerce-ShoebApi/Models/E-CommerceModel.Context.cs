//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E_Commerce_ShoebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class sdirecttestdbEntities : DbContext
    {
        public sdirecttestdbEntities()
            : base("name=sdirecttestdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAddress_Sk> tblAddress_Sk { get; set; }
        public virtual DbSet<tblAdminTasks_Sk> tblAdminTasks_Sk { get; set; }
        public virtual DbSet<tblBank_Sk> tblBank_Sk { get; set; }
        public virtual DbSet<tblBankNameUser_Sk> tblBankNameUser_Sk { get; set; }
        public virtual DbSet<tblBorrowMoney_Sk> tblBorrowMoney_Sk { get; set; }
        public virtual DbSet<tblBusinessType_Sk> tblBusinessType_Sk { get; set; }
        public virtual DbSet<tblBuyers_Sk> tblBuyers_Sk { get; set; }
        public virtual DbSet<tblCity_Sk> tblCity_Sk { get; set; }
        public virtual DbSet<tblCountry_Sk> tblCountry_Sk { get; set; }
        public virtual DbSet<tblDebitCards_Sk> tblDebitCards_Sk { get; set; }
        public virtual DbSet<tblInventory_Sk> tblInventory_Sk { get; set; }
        public virtual DbSet<tblItems_Sk> tblItems_Sk { get; set; }
        public virtual DbSet<tblNotifications_Sk> tblNotifications_Sk { get; set; }
        public virtual DbSet<tblOrders_Sk> tblOrders_Sk { get; set; }
        public virtual DbSet<tblOrderStatus_Sk> tblOrderStatus_Sk { get; set; }
        public virtual DbSet<tblPaymentMethod_Sk> tblPaymentMethod_Sk { get; set; }
        public virtual DbSet<tblProducts_Sk> tblProducts_Sk { get; set; }
        public virtual DbSet<tblProductsCategory_Sk> tblProductsCategory_Sk { get; set; }
        public virtual DbSet<tblRole_Sk> tblRole_Sk { get; set; }
        public virtual DbSet<tblSellers_Sk> tblSellers_Sk { get; set; }
        public virtual DbSet<tblSellerStatus_Sk> tblSellerStatus_Sk { get; set; }
        public virtual DbSet<tblShippingMethod_Sk> tblShippingMethod_Sk { get; set; }
        public virtual DbSet<tblStates_AT> tblStates_AT { get; set; }
        public virtual DbSet<tbltemHistory_Sk> tbltemHistory_Sk { get; set; }
        public virtual DbSet<tblUser_Sk> tblUser_Sk { get; set; }
    
        public virtual ObjectResult<GetUserDetails_Sk_Result> GetUserDetails_Sk(Nullable<int> num)
        {
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetails_Sk_Result>("GetUserDetails_Sk", numParameter);
        }
    
        public virtual int AddProduct_Sk(Nullable<int> productCategoryId, string productName, string description, string brand, byte[] image, string sellerName, string updaterName, Nullable<int> pricePerUnit, Nullable<int> productCount, Nullable<int> sellerId)
        {
            var productCategoryIdParameter = productCategoryId.HasValue ?
                new ObjectParameter("ProductCategoryId", productCategoryId) :
                new ObjectParameter("ProductCategoryId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var sellerNameParameter = sellerName != null ?
                new ObjectParameter("SellerName", sellerName) :
                new ObjectParameter("SellerName", typeof(string));
    
            var updaterNameParameter = updaterName != null ?
                new ObjectParameter("UpdaterName", updaterName) :
                new ObjectParameter("UpdaterName", typeof(string));
    
            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new ObjectParameter("PricePerUnit", pricePerUnit) :
                new ObjectParameter("PricePerUnit", typeof(int));
    
            var productCountParameter = productCount.HasValue ?
                new ObjectParameter("ProductCount", productCount) :
                new ObjectParameter("ProductCount", typeof(int));
    
            var sellerIdParameter = sellerId.HasValue ?
                new ObjectParameter("SellerId", sellerId) :
                new ObjectParameter("SellerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct_Sk", productCategoryIdParameter, productNameParameter, descriptionParameter, brandParameter, imageParameter, sellerNameParameter, updaterNameParameter, pricePerUnitParameter, productCountParameter, sellerIdParameter);
        }
    }
}
